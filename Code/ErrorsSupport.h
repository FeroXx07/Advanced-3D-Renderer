#pragma once
#include "platform.h"
#include "glad/glad.h"

class OpenGLErrorGuard
{
public:
    OpenGLErrorGuard(const char* message);

    ~OpenGLErrorGuard();

    static void CheckGLError(const char* around, const char* message);
    const char* msg;
};

inline OpenGLErrorGuard::OpenGLErrorGuard(const char* message): msg(message)
{
    CheckGLError("BEGIN", msg);
}

inline OpenGLErrorGuard::~OpenGLErrorGuard()
{
    CheckGLError("END", msg);
}

inline void OpenGLErrorGuard::CheckGLError(const char* around, const char* message)
{
    GLenum err;
    while((err = glGetError()) != GL_NO_ERROR)
    {
            
    }
}

static void OnGlError(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam)
{
    if (severity == GL_DEBUG_SEVERITY_NOTIFICATION)
        return;
    
    ELOG("OpenGL debug message: %s", message)
    // Messages Generated by
    switch (source)
    {
    case GL_DEBUG_SOURCE_API: ELOG(" - source: GL_DEBUG_SOURCE_API") break; // Calls to the OpenGL API
    case GL_DEBUG_SOURCE_WINDOW_SYSTEM: ELOG(" - source: GL_DEBUG_SOURCE_WINDOW_SYSTEM") break; // Calls to the window-system API, The window system, such as WGL or GLX
    case GL_DEBUG_SOURCE_SHADER_COMPILER: ELOG(" - source: GL_DEBUG_SOURCE_SHADER_COMPILER") break; // The GLSL shader compiler or compilers for other extension-provided languages
    case GL_DEBUG_SOURCE_THIRD_PARTY: ELOG(" - source: GL_DEBUG_SOURCE_THIRD_PARTY") break; // An application associated with OpenGL, External debuggers or third-party middleware libraries
    case GL_DEBUG_SOURCE_APPLICATION: ELOG(" - source: GL_DEBUG_SOURCE_APPLICATION") break; // Generated by the user of this application
    case GL_DEBUG_SOURCE_OTHER: ELOG(" - source: GL_DEBUG_SOURCE_OTHER") break; // Sources that do not fit to any of the ones listed above
    default: ELOG(" - source: GL_DEBUG_SOURCE_OTHER") break;
    }
    // Informs about
    switch (type)
    {
    case GL_DEBUG_TYPE_ERROR: ELOG(" - type: GL_DEBUG_TYPE_ERROR") break; // Events that generated an error, typically from the API
    case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: ELOG(" - type: GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR") break; // Behavior that has been marked for deprecation
    case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR: ELOG(" - type: GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR") break; // Behavior that is undefined according to the specification
    case GL_DEBUG_TYPE_PORTABILITY: ELOG(" - type: GL_DEBUG_TYPE_PORTABILITY") break; // Some functionality the user relies upon, Use of extensions or shaders in a way that is highly vendor-specific
    case GL_DEBUG_TYPE_PERFORMANCE: ELOG(" - type: GL_DEBUG_TYPE_PERFORMANCE") break; // Code has triggered performance related issues, Implementation-dependent performance warnings
    case GL_DEBUG_TYPE_MARKER: ELOG(" - type: GL_DEBUG_TYPE_MARKER") break; // Annotation of the command stream 
    case GL_DEBUG_TYPE_PUSH_GROUP: ELOG(" - type: GL_DEBUG_TYPE_PUSH_GROUP") break; //  Entering a debug group
    case GL_DEBUG_TYPE_POP_GROUP: ELOG(" - type: GL_DEBUG_TYPE_POP_GROUP") break; //  Leaving a debug group
    case GL_DEBUG_TYPE_OTHER: ELOG(" - type: GL_DEBUG_TYPE_OTHER") break; // Types that do not fit to any of the ones listed above
    default: ELOG(" - type: GL_DEBUG_TYPE_OTHER") break;
    }
    // Suggested examples of messages
    switch (severity)
    {
        /*Any GL error; dangerous undefined behavior; any GLSL or ARB shader compiler and linker errors;*/
    case GL_DEBUG_SEVERITY_HIGH: ELOG(" - severity: GL_DEBUG_SEVERITY_HIGH") break; 
        /*Severe performance warnings; GLSL or other shader compiler and linker warnings; use of currently deprecated behavior*/
    case GL_DEBUG_SEVERITY_MEDIUM: ELOG(" - severity: GL_DEBUG_SEVERITY_MEDIUM") break;
        /*Performance warnings from redundant state changes; trivial undefined behavior*/
    case GL_DEBUG_SEVERITY_LOW: ELOG(" - severity: GL_DEBUG_SEVERITY_LOW") break;
        /*Any message which is not an error or performance concern*/
    case GL_DEBUG_SEVERITY_NOTIFICATION: ELOG(" - severity: GL_DEBUG_SEVERITY_NOTIFICATION") break;
    default: ELOG(" - severity: GL_DEBUG_SEVERITY_NOTIFICATION") break;
    }
}
